---
interface Props {
  name: string;
  params?: ReferenceParam[];
  overloads?: ReferenceOverloads;
}

import {
  type ReferenceOverloads,
  type ReferenceParam,
} from "@/types/parsers.interface.ts";
import CodeContainer from "@components/CodeContainer/index.astro";
import { CopyCodeButton } from "../CopyCodeButton";

const { params, name, overloads } = Astro.props;

const formatParam = (param: ReferenceParam) =>
  param.optional ? `[${param.name}]` : `${param.name}`;

const signatures = params 
  ? [`${name}(${params.map(formatParam).join(", ")})`]
  : overloads
    ? overloads.map(overload => 
        `${name}(${overload.params.map(formatParam).join(", ")})`)
    : [];
---

{
  signatures.map((signature) => (
    <CodeContainer>
      <span class="text-black">{signature}</span>
      <div class="absolute top-xs right-xs">
        <CopyCodeButton client:load textToCopy={signature} />
      </div>
    </CodeContainer>
  ))
}