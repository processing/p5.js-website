---
import type { CollectionEntry } from "astro:content";
import Head from "@components/Head/index.astro";
import { setJumpToState } from "../globals/state";
import { getCurrentLocale, getUiTranslator } from "../i18n/utils";
import {
  generateJumpToState,
  getRelatedEntriesinCollection,
} from "../pages/_utils";
import BaseLayout from "./BaseLayout.astro";
import EditableSketch from "@components/EditableSketch/index.astro";
import RelatedItems from "@components/RelatedItems/index.astro";

interface Props {
  example: CollectionEntry<"examples">;
  code: string;
  relatedExamples: CollectionEntry<"examples">[];
}

const { example, code, relatedExamples } = Astro.props;

const currentLocale = getCurrentLocale(Astro.url.pathname);
const t = await getUiTranslator(currentLocale);

const jumpToState = await generateJumpToState(
  "examples",
  example.slug,
  "Examples",
  t,
  currentLocale
);

setJumpToState(jumpToState);

const relatedReferences =
  example.data.relatedReference !== undefined
    ? await getRelatedEntriesinCollection(
        "reference",
        currentLocale,
        example.data.relatedReference.map((r: any) => r.slug)
      )
    : [];

const { Content } = await example.render();

// Extract the collective attribution year. If multiple provided, uses last shown.
const collectivelyAttributedSince = example.data.remix?.reduce(
  (acc: number | null, item) => {
    if (item.collectivelyAttributedSince) {
      return item.collectivelyAttributedSince;
    }
    return acc;
  },
  null
);

// Boolean value on whether the remix history contains links to code
const remixHistoryHasCodeLinks = example.data.remix?.some(
  (item) => Array.isArray(item.code) && item.code.length > 0
);

---

<Head
  title={example.data.title}
  locale={currentLocale}
  featuredImageSrc={example.data.featuredImage.src}
  description={example.data.oneLineDescription}
/>

<BaseLayout
  title={example.data.title}
  titleClass=""
  subtitle={null}
  variant="item"
  topic="examples"
  className="example"
>
  <div class="mt-xl mb-4xl lg:mb-3xl max-w-[770px]">
    <div class="rendered-markdown">
      <Content />
    </div>
    <div class="rendered-markdown">
      <img src="/images/by-nc-sa.svg" />

      <p>

      <a href={Astro.url.pathname}>{example.data.title}</a>:{" "}

      {example.data.remix?.map((item, i) => {
        const parts = [];

        // Each remix entry requires at least one attribution
        // If a remix entry contains a collective attribution starting year, it is ignored here

        if (!item.collectivelyAttributedSince && item.attribution) {
          parts.push(<>{t("attribution", item.description)}</>);

          if (item.attribution?.length) {
            parts.push(
              <>
                {" "}
                {item.attribution.map((a, j) => (
                  <>
                    {a.URL ? <a href={a.URL}>{t(a.name)}</a> : t(a.name)}
                    {
                      item.attribution?.length
                      ? j < item.attribution.length - 1 ? ", " : "."
                      : ""
                    }
                  </>
                ))}
              </>
            );
          }
        }

        return <span>{i > 0 && " "}{parts}</span>;
      })}

      {collectivelyAttributedSince ? (
        <>{t("attribution", `From ${collectivelyAttributedSince} onwards, edited and maintained by`)}{" "}</>
      ) : (
        <>{t("attribution", "Edited and maintained by")}{" "}</>
      )}
      <span>
        <a href="https://github.com/processing/p5.js?tab=readme-ov-file#contributors">p5.js Contributors</a>{" "}
        {t("attribution", "and")}{" "}
        <a href="https://processingfoundation.org/people">Processing Foundation</a>.
        Licensed under{" "}
        <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/">CC BY-NC-SA 4.0</a>.
      </span>
    </p>

    <p>
      {remixHistoryHasCodeLinks ? (
        <>
          {t("attribution", "You can find the code history of these examples here")}{": "}
          {example.data.remix
            .map(item => item?.code)
            .flat()
            .filter(codeItem => codeItem && codeItem.URL)
            .map((codeItem, i, codeItemsList) => (
              <>
                <a href={codeItem?.URL}>{codeItem?.label}</a>{
                  i < (codeItemsList?.length ?? 0) - 1 ? ", " : ". "
                }
              </>
            ))}
          {t("attribution", "You can suggest improvements by")}{" "}
          <a href="https://github.com/processing/p5.js-website">{t("attribution", "contributing to the current website")}</a>!
        </>
      ) : (
        <></>
      )}
    </p>


  </div>

  <EditableSketch code={code} />
  <p>{example.data.arialabel}</p>

  </div>
  <div class="grid gap-y-4xl lg:gap-y-mb-3xl mt-2xl">
    {
      relatedReferences.length > 0 ? (
        <RelatedItems
          title={t("Related References") as string}
          items={relatedReferences}
        />
      ) : null
    }
    <RelatedItems
      title={t("Related Examples") as string}
      items={relatedExamples}
    />
  </div>
</BaseLayout>
