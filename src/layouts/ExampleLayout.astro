---
import type { CollectionEntry } from "astro:content";
import Head from "@components/Head/index.astro";
import { setJumpToState } from "../globals/state";
import { getCurrentLocale, getUiTranslator, removeLocalePrefix } from "../i18n/utils";
import {
  generateJumpToState,
  getRelatedEntriesinCollection,
} from "../pages/_utils";
import BaseLayout from "./BaseLayout.astro";
import EditableSketch from "@components/EditableSketch/index.astro";
import RelatedItems from "@components/RelatedItems/index.astro";
import OutdatedTranslationBanner from "@components/OutdatedTranslationBanner/index.astro";
import fs from "fs";
import path from "path";

interface Props {
  example: CollectionEntry<"examples">;
  code: string;
  relatedExamples: CollectionEntry<"examples">[];
}

const { example, code, relatedExamples } = Astro.props;

const currentLocale = getCurrentLocale(Astro.url.pathname);
const t = await getUiTranslator(currentLocale);

const jumpToState = await generateJumpToState(
  "examples",
  example.slug,
  "Examples",
  t,
  currentLocale
);

setJumpToState(jumpToState);

const relatedReferences =
  example.data.relatedReference !== undefined
    ? await getRelatedEntriesinCollection(
        "reference",
        currentLocale,
        example.data.relatedReference.map((r: any) => r.slug)
      )
    : [];

const { Content } = await example.render();

// Determine if this example is marked outdated/missing for the current locale
let showBanner = false;
// Build English URL by manually replacing the locale prefix
let englishUrl = Astro.url.pathname;
if (currentLocale !== 'en') {
  // Replace /{locale}/ with / to get English URL
  englishUrl = englishUrl.replace(`/${currentLocale}/`, '/');
}

if (!englishUrl.startsWith('http')) {
  englishUrl = `${Astro.url.origin}${englishUrl}`;
}
console.log('DEBUG: Current pathname:', Astro.url.pathname);
console.log('DEBUG: English URL after manual replacement:', englishUrl);
console.log('DEBUG: Current locale:', currentLocale);

try {
  const manifestPath = path.join(process.cwd(), "public", "translation-status", "examples.json");
  if (fs.existsSync(manifestPath)) {
    const raw = fs.readFileSync(manifestPath, "utf8");
    const manifest = JSON.parse(raw);
    // Derive keys compatible with the manifest
    const idNoLocale = (example.id || "").replace(/^[\w-]+\//, "");
    const withoutExt = idNoLocale.replace(/\.(mdx?|ya?ml)$/, "");
    const keyWithDescription = withoutExt; // e.g. 11_3D/00_Geometries/description
    const keyWithoutDescription = withoutExt.replace(/\/description$/, ""); // e.g. 11_3D/00_Geometries
    const entry = manifest.examples?.[keyWithoutDescription] || manifest.examples?.[keyWithDescription];
    if (entry && currentLocale !== "en") {
      const isOutdated = Array.isArray(entry.outdated) && entry.outdated.includes(currentLocale);
      const isMissing = Array.isArray(entry.missing) && entry.missing.includes(currentLocale);
      showBanner = isOutdated || isMissing;
      if (isMissing) {
        // If missing, always point to English counterpart
        let missingEnglishUrl = Astro.url.pathname.replace(`/${currentLocale}/`, '/');
        englishUrl = `${Astro.url.origin}${missingEnglishUrl}`;
      }
    }
  }
} catch (e) {
  console.error(e);
  
}
---

<Head
  title={example.data.title}
  locale={currentLocale}
  featuredImageSrc={example.data.featuredImage.src}
  description={example.data.oneLineDescription}
/>

<BaseLayout
  title={example.data.title}
  titleClass=""
  subtitle={null}
  variant="item"
  topic="examples"
  className="example"
>
  {showBanner ? (
    <OutdatedTranslationBanner englishUrl={englishUrl} locale={currentLocale} />
  ) : null}
  <div class="mt-xl mb-4xl lg:mb-3xl max-w-[770px]">
    <div class="rendered-markdown">
      <Content />
    </div>
    <EditableSketch code={code} />
    <p>{example.data.arialabel}</p>
    <div class="rendered-markdown">
      <p>
        <a href={Astro.url.pathname}>{example.data.title}</a> by <a href="https://p5js.org/people">p5.js Contributors</a> and the <a href="https://processingfoundation.org/people">Processing Foundation</a> is licensed under <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">CC BY-NC-SA 4.0</a>.
      </p>
      <img src="/images/by-nc-sa.svg" />
    </div>
  </div>
  <div class="grid gap-y-4xl lg:gap-y-mb-3xl mt-2xl">
    {
      relatedReferences.length > 0 ? (
        <RelatedItems
          title={t("Related References") as string}
          items={relatedReferences}
        />
      ) : null
    }
    <RelatedItems
      title={t("Related Examples") as string}
      items={relatedExamples}
    />
  </div>
</BaseLayout>
