---
import BaseLayout from "@layouts/BaseLayout.astro";
import RelatedItems from "@components/RelatedItems/index.astro";
import Head from "@components/Head/index.astro";
import {
  getRandomCurationSketches,
  getSketch,
  makeSketchEmbedUrl,
  makeSketchLinkUrl,
  makeThumbnailUrl,
  getSketchSize,
} from "@/src/api/OpenProcessing";
import LinkButton from "@components/LinkButton/index.astro";
import { getCurrentLocale, getUiTranslator } from "../i18n/utils";
import { setJumpToState } from "../globals/state";
import { ScalingIframe } from "@components/ScalingIframe";

interface Props {
  sketchId: string;
  authorName: string;
}

const { sketchId, authorName } = Astro.props;
const sketchInfo = await getSketch(sketchId);

const currentLocale = getCurrentLocale(Astro.url.pathname);
const t = await getUiTranslator(currentLocale);
const dateString = new Date(sketchInfo.createdOn).toLocaleDateString(
  currentLocale,
  {
    year: "numeric",
    month: "long",
    day: "numeric",
  }
);

setJumpToState(null);
const moreSketches = await getRandomCurationSketches(4);
const featuredImageURL = makeThumbnailUrl(sketchInfo.visualID);

let { width, height } = await getSketchSize(sketchInfo.visualID);
let heightOverWidth = 1 / 1.5;
if (width && height) {
  // Account for OP header bar
  height += 50;
  heightOverWidth = height / width;
}

const iframeTitle = `OpenProcessing Sketch: ${sketchInfo.title} by ${authorName}`;
---

<Head
  title={sketchInfo.title}
  locale={currentLocale}
  featuredImageSrc={featuredImageURL}
  description={sketchInfo.instructions}
/>

<BaseLayout
  title={sketchInfo.title}
  titleAuthor={authorName}
  subtitle={dateString}
  variant="item"
  topic={"community"}
>
  <div class="max-w-[770px]">
    <div style={{
      position: 'relative',
      width: '100%',
      paddingBottom: `${(heightOverWidth * 100).toFixed(4)}%`,
    }}>
      {width ? (
        <ScalingIframe
          client:load
          src={makeSketchEmbedUrl(sketchInfo.visualID)}
          width={width}
          height={height}
          title={iframeTitle}
        />
      ) : (
        <iframe
          src={makeSketchEmbedUrl(sketchInfo.visualID)}
          width="100%"
          height="100%"
          style={{ position: 'absolute', top: 0, left: 0, right: 0, bottom: 0 }}
          title={iframeTitle}
        />
      )}
    </div>
    <div class="py-md grid gap-y-sm md:gap-y-md">
      <LinkButton
        variant="code"
        url={`${makeSketchLinkUrl(sketchInfo.visualID)}/#code`}
        class="min-w-[184px] lg:min-w-[220px]">{t("Show Code")}</LinkButton
      >
      <LinkButton
        variant="link"
        url="https://openprocessing.org"
        class="min-w-[184px] lg:min-w-[220px]">OpenProcessing</LinkButton
      >
    </div>

    {
      sketchInfo.instructions && (
        <p class="text-md my-sm md:my-lg">{sketchInfo.instructions}</p>
      )
    }

    <p class="text-xs md:text-base mb-3xl">
      This <a
        class="text-type-magenta"
        href={makeSketchLinkUrl(sketchInfo.visualID)}>sketch</a
      > is ported from the <a
        class="text-type-magenta"
        href="https://openprocessing.org">OpenProcessing</a
      >
      sketch archive.
    </p>
  </div>
  <RelatedItems title={t("More Sketches") as string} items={moreSketches} />
</BaseLayout>
